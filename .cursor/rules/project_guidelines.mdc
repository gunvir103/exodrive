---
description: 
globs: 
alwaysApply: true
---
# .cursorrules

## Purpose
These rules guide both humans and AI agents (e.g. ChatGPT Codex, Cursor) when reading, generating, or editing code inside the Exo Drive monorepo.

---

## 1. General Conventions
- **Language**: TypeScript (strict) by default. Use JavaScript only for build tooling that Bun cannot type-check.
- **Modules**: ES modules only. No CommonJS `require()`.
- **Runtime**: Code must run under Bun 1.x; avoid Node-only APIs.
- **Framework**: Next.js (≥ 14, App Router). Prefer Server Components; use `"use client"` only when strictly needed.
- **Styling / UI**: shadcn/ui primitives + Tailwind CSS. Keep components accessible (WCAG AA) and mobile-first.
- **Testing**: Vitest for unit/integration; test files `*.test.ts(x)` colocated with source or in `__tests__/`.
- **Deployment**: Must build and run on Vercel without extra config.

## 2. Supabase-Specific
- Store all migrations in `supabase/migrations/` with timestamped names.
- SQL functions:
  - Always `SECURITY INVOKER`.
  - `search_path=''` inside function.
  - Never hard-code UUIDs or secrets.
- Activate RLS on every table; document policies next to table DDL.

## 3. Project Structure
- Use the existing `app/` (App Router) layout for pages & routes.
- Place reusable React components in `components/`.
- Utilities & services live in `lib/`.
- Keep API routes under `app/api/` (edge-runtime when possible).

## 4. Coding Style
- Follow `bun format` + Prettier defaults.
- ESLint must pass (`bunx eslint .`).
- Use named exports; default exports only for React pages.
- Prefer immutability and pure functions.
- Provide JSDoc/TSDoc for all exported functions and components.

## 5. Commit & PR Hygiene
- Message format: `<type>: <short imperative sentence>` (max 72 chars). Types: `feat`, `fix`, `refactor`, `docs`, `test`, `chore`.
- PRs require CI green (Vitest + ESLint) before merge.
- Link related issues in description.

## 6. AI / ChatGPT Codex Best Practices
> Summarised from [Latent Space – "ChatGPT Codex: The Missing Manual"](mdc:https:/www.latent.space/p/codex).

1. **Write modular code** – small, typed modules help the agent reason.
2. **Lint & format early** – fast feedback loops improve code generation.
3. **Commit hooks** – run ESLint, Prettier, and Vitest on staged files.
4. **Abundant mindset** – feel free to spawn many small AI tasks; review their output.
5. **Groom `agents.md`** – keep agent definitions up-to-date as capabilities grow.
6. **Make the repo discoverable** – descriptive file & folder names; comprehensive README.
7. **Let Codex propose tasks** – when stuck, ask the agent what to do next.
8. **Prefer typed languages** – leverage TypeScript's type system to guide the agent.

## 7. Forbidden
- Committing secrets or `.env` values.
- Direct database calls bypassing Supabase client.
- Disabling ESLint rules wholesale (`/* eslint-disable */`).
- Committing large binary files (> 5 MB) outside `public/`.

---

_Last updated: {{DATE}} – keep this file evergreen as the project evolves._

